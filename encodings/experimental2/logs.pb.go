// Code generated by protoc-gen-go. DO NOT EDIT.
// source: logs.proto

package experimental2

import (
	fmt "fmt"
	proto "github.com/golang/protobuf/proto"
	math "math"
)

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion3 // please upgrade the proto package

type SeverityNumber int32

const (
	SeverityNumber_UNDEFINED_SEVERITY_NUMBER SeverityNumber = 0
	SeverityNumber_TRACE                     SeverityNumber = 1
	SeverityNumber_TRACE2                    SeverityNumber = 2
	SeverityNumber_TRACE3                    SeverityNumber = 3
	SeverityNumber_TRACE4                    SeverityNumber = 4
	SeverityNumber_DEBUG                     SeverityNumber = 5
	SeverityNumber_DEBUG2                    SeverityNumber = 6
	SeverityNumber_DEBUG3                    SeverityNumber = 7
	SeverityNumber_DEBUG4                    SeverityNumber = 8
	SeverityNumber_INFO                      SeverityNumber = 9
	SeverityNumber_INFO2                     SeverityNumber = 10
	SeverityNumber_INFO3                     SeverityNumber = 11
	SeverityNumber_INFO4                     SeverityNumber = 12
	SeverityNumber_WARN                      SeverityNumber = 13
	SeverityNumber_WARN2                     SeverityNumber = 14
	SeverityNumber_WARN3                     SeverityNumber = 15
	SeverityNumber_WARN4                     SeverityNumber = 16
	SeverityNumber_ERROR                     SeverityNumber = 17
	SeverityNumber_ERROR2                    SeverityNumber = 18
	SeverityNumber_ERROR3                    SeverityNumber = 19
	SeverityNumber_ERROR4                    SeverityNumber = 20
	SeverityNumber_FATAL                     SeverityNumber = 21
	SeverityNumber_FATAL2                    SeverityNumber = 22
	SeverityNumber_FATAL3                    SeverityNumber = 23
	SeverityNumber_FATAL4                    SeverityNumber = 24
)

var SeverityNumber_name = map[int32]string{
	0:  "UNDEFINED_SEVERITY_NUMBER",
	1:  "TRACE",
	2:  "TRACE2",
	3:  "TRACE3",
	4:  "TRACE4",
	5:  "DEBUG",
	6:  "DEBUG2",
	7:  "DEBUG3",
	8:  "DEBUG4",
	9:  "INFO",
	10: "INFO2",
	11: "INFO3",
	12: "INFO4",
	13: "WARN",
	14: "WARN2",
	15: "WARN3",
	16: "WARN4",
	17: "ERROR",
	18: "ERROR2",
	19: "ERROR3",
	20: "ERROR4",
	21: "FATAL",
	22: "FATAL2",
	23: "FATAL3",
	24: "FATAL4",
}

var SeverityNumber_value = map[string]int32{
	"UNDEFINED_SEVERITY_NUMBER": 0,
	"TRACE":                     1,
	"TRACE2":                    2,
	"TRACE3":                    3,
	"TRACE4":                    4,
	"DEBUG":                     5,
	"DEBUG2":                    6,
	"DEBUG3":                    7,
	"DEBUG4":                    8,
	"INFO":                      9,
	"INFO2":                     10,
	"INFO3":                     11,
	"INFO4":                     12,
	"WARN":                      13,
	"WARN2":                     14,
	"WARN3":                     15,
	"WARN4":                     16,
	"ERROR":                     17,
	"ERROR2":                    18,
	"ERROR3":                    19,
	"ERROR4":                    20,
	"FATAL":                     21,
	"FATAL2":                    22,
	"FATAL3":                    23,
	"FATAL4":                    24,
}

func (x SeverityNumber) String() string {
	return proto.EnumName(SeverityNumber_name, int32(x))
}

func (SeverityNumber) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0}
}

type LogRecordFlags int32

const (
	LogRecordFlags_UNDEFINED_LOG_RECORD_FLAG LogRecordFlags = 0
	LogRecordFlags_TRACE_FLAGS_MASK          LogRecordFlags = 255
)

var LogRecordFlags_name = map[int32]string{
	0:   "UNDEFINED_LOG_RECORD_FLAG",
	255: "TRACE_FLAGS_MASK",
}

var LogRecordFlags_value = map[string]int32{
	"UNDEFINED_LOG_RECORD_FLAG": 0,
	"TRACE_FLAGS_MASK":          255,
}

func (x LogRecordFlags) String() string {
	return proto.EnumName(LogRecordFlags_name, int32(x))
}

func (LogRecordFlags) EnumDescriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{1}
}

// A collection of logs from a Resource.
type ResourceLogs struct {
	// The resource for the spans in this message.
	// If this field is not set then no resource info is known.
	Resource             *Resource    `protobuf:"bytes,1,opt,name=resource,proto3" json:"resource,omitempty"`
	Logs                 []*LogRecord `protobuf:"bytes,2,rep,name=logs,proto3" json:"logs,omitempty"`
	XXX_NoUnkeyedLiteral struct{}     `json:"-"`
	XXX_unrecognized     []byte       `json:"-"`
	XXX_sizecache        int32        `json:"-"`
}

func (m *ResourceLogs) Reset()         { *m = ResourceLogs{} }
func (m *ResourceLogs) String() string { return proto.CompactTextString(m) }
func (*ResourceLogs) ProtoMessage()    {}
func (*ResourceLogs) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{0}
}

func (m *ResourceLogs) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_ResourceLogs.Unmarshal(m, b)
}
func (m *ResourceLogs) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_ResourceLogs.Marshal(b, m, deterministic)
}
func (m *ResourceLogs) XXX_Merge(src proto.Message) {
	xxx_messageInfo_ResourceLogs.Merge(m, src)
}
func (m *ResourceLogs) XXX_Size() int {
	return xxx_messageInfo_ResourceLogs.Size(m)
}
func (m *ResourceLogs) XXX_DiscardUnknown() {
	xxx_messageInfo_ResourceLogs.DiscardUnknown(m)
}

var xxx_messageInfo_ResourceLogs proto.InternalMessageInfo

func (m *ResourceLogs) GetResource() *Resource {
	if m != nil {
		return m.Resource
	}
	return nil
}

func (m *ResourceLogs) GetLogs() []*LogRecord {
	if m != nil {
		return m.Logs
	}
	return nil
}

type LogRecord struct {
	// time_unix_nano is the time when the event occurred.
	// Value is UNIX Epoch time in nanoseconds since 00:00:00 UTC on 1 January 1970.
	// Value of 0 indicates unknown or missing timestamp.
	TimeUnixnano uint64 `protobuf:"fixed64,1,opt,name=time_unixnano,json=timeUnixnano,proto3" json:"time_unixnano,omitempty"`
	// A unique identifier for a trace. All logs from the same trace share
	// the same `trace_id`. The ID is a 16-byte array. An ID with all zeroes
	// is considered invalid. Can be set for logs that are part of request processing
	// and have an assigned trace id. Optional.
	TraceId []byte `protobuf:"bytes,2,opt,name=trace_id,json=traceId,proto3" json:"trace_id,omitempty"`
	// A unique identifier for a span within a trace, assigned when the span
	// is created. The ID is an 8-byte array. An ID with all zeroes is considered
	// invalid. Can be set for logs that are part of a particular processing span.
	// If span_id is present trace_id SHOULD be also present. Optional.
	SpanId []byte `protobuf:"bytes,3,opt,name=span_id,json=spanId,proto3" json:"span_id,omitempty"`
	// Optional flags, a bit field. 8 least significant bits are the trace flags as
	// defined in W3C Trace Context specification. 24 most significant bits are reserved
	// and must be set to 0. Readers that must not assume that 24 most significant bits
	// will be zero and must correctly mask the bits when reading 8-bit trace flag (use
	// flags & TRACE_FLAGS_MASK). Optional.
	Flags uint32 `protobuf:"fixed32,4,opt,name=flags,proto3" json:"flags,omitempty"`
	// Numerical value of the severity, normalized to values described in
	// https://github.com/open-telemetry/oteps/pull/97. Optional.
	SeverityNumber SeverityNumber `protobuf:"varint,5,opt,name=severity_number,json=severityNumber,proto3,enum=experimental2.SeverityNumber" json:"severity_number,omitempty"`
	// The severity text (also known as log level). The original string representation as
	// it is known at the source. Optional.
	SeverityText string `protobuf:"bytes,6,opt,name=severity_text,json=severityText,proto3" json:"severity_text,omitempty"`
	// Short event identifier that does not contain varying parts. ShortName describes
	// what happened (e.g. "ProcessStarted"). Recommended to be no longer than 50
	// characters. Not guaranteed to be unique in any way. Optional.
	ShortName string `protobuf:"bytes,7,opt,name=short_name,json=shortName,proto3" json:"short_name,omitempty"`
	// A value containing the body of the log record. Can be for example a human-readable
	// string message (including multi-line) describing the event in a free form or it can
	// be a structured data composed of arrays and maps of other values. Optional.
	Body *AttributeKeyValue `protobuf:"bytes,8,opt,name=body,proto3" json:"body,omitempty"`
	// Additional attributes that describe the specific event occurrence. Optional.
	Attributes             []*AttributeKeyValue `protobuf:"bytes,9,rep,name=attributes,proto3" json:"attributes,omitempty"`
	DroppedAttributesCount uint32               `protobuf:"varint,10,opt,name=dropped_attributes_count,json=droppedAttributesCount,proto3" json:"dropped_attributes_count,omitempty"`
	XXX_NoUnkeyedLiteral   struct{}             `json:"-"`
	XXX_unrecognized       []byte               `json:"-"`
	XXX_sizecache          int32                `json:"-"`
}

func (m *LogRecord) Reset()         { *m = LogRecord{} }
func (m *LogRecord) String() string { return proto.CompactTextString(m) }
func (*LogRecord) ProtoMessage()    {}
func (*LogRecord) Descriptor() ([]byte, []int) {
	return fileDescriptor_782e6d65c19305b4, []int{1}
}

func (m *LogRecord) XXX_Unmarshal(b []byte) error {
	return xxx_messageInfo_LogRecord.Unmarshal(m, b)
}
func (m *LogRecord) XXX_Marshal(b []byte, deterministic bool) ([]byte, error) {
	return xxx_messageInfo_LogRecord.Marshal(b, m, deterministic)
}
func (m *LogRecord) XXX_Merge(src proto.Message) {
	xxx_messageInfo_LogRecord.Merge(m, src)
}
func (m *LogRecord) XXX_Size() int {
	return xxx_messageInfo_LogRecord.Size(m)
}
func (m *LogRecord) XXX_DiscardUnknown() {
	xxx_messageInfo_LogRecord.DiscardUnknown(m)
}

var xxx_messageInfo_LogRecord proto.InternalMessageInfo

func (m *LogRecord) GetTimeUnixnano() uint64 {
	if m != nil {
		return m.TimeUnixnano
	}
	return 0
}

func (m *LogRecord) GetTraceId() []byte {
	if m != nil {
		return m.TraceId
	}
	return nil
}

func (m *LogRecord) GetSpanId() []byte {
	if m != nil {
		return m.SpanId
	}
	return nil
}

func (m *LogRecord) GetFlags() uint32 {
	if m != nil {
		return m.Flags
	}
	return 0
}

func (m *LogRecord) GetSeverityNumber() SeverityNumber {
	if m != nil {
		return m.SeverityNumber
	}
	return SeverityNumber_UNDEFINED_SEVERITY_NUMBER
}

func (m *LogRecord) GetSeverityText() string {
	if m != nil {
		return m.SeverityText
	}
	return ""
}

func (m *LogRecord) GetShortName() string {
	if m != nil {
		return m.ShortName
	}
	return ""
}

func (m *LogRecord) GetBody() *AttributeKeyValue {
	if m != nil {
		return m.Body
	}
	return nil
}

func (m *LogRecord) GetAttributes() []*AttributeKeyValue {
	if m != nil {
		return m.Attributes
	}
	return nil
}

func (m *LogRecord) GetDroppedAttributesCount() uint32 {
	if m != nil {
		return m.DroppedAttributesCount
	}
	return 0
}

func init() {
	proto.RegisterEnum("experimental2.SeverityNumber", SeverityNumber_name, SeverityNumber_value)
	proto.RegisterEnum("experimental2.LogRecordFlags", LogRecordFlags_name, LogRecordFlags_value)
	proto.RegisterType((*ResourceLogs)(nil), "experimental2.ResourceLogs")
	proto.RegisterType((*LogRecord)(nil), "experimental2.LogRecord")
}

func init() { proto.RegisterFile("logs.proto", fileDescriptor_782e6d65c19305b4) }

var fileDescriptor_782e6d65c19305b4 = []byte{
	// 605 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x00, 0x00, 0x00, 0x02, 0xff, 0x84, 0x93, 0x4f, 0x6f, 0xda, 0x4a,
	0x14, 0xc5, 0x63, 0xfe, 0x73, 0x03, 0xe4, 0xbe, 0x79, 0xf9, 0xe3, 0x3c, 0x29, 0x4f, 0x56, 0xba,
	0x41, 0x51, 0x8b, 0x54, 0x9b, 0x45, 0x97, 0x85, 0x60, 0x47, 0x28, 0xc4, 0x44, 0x03, 0xa4, 0xea,
	0xca, 0x32, 0x78, 0x4a, 0x2d, 0x61, 0x0f, 0xb5, 0x87, 0x08, 0xbe, 0x59, 0xb7, 0xfd, 0x64, 0xad,
	0x66, 0x82, 0xdd, 0x92, 0x4d, 0x77, 0xbf, 0x7b, 0xce, 0xb9, 0x33, 0xa3, 0xab, 0xb9, 0x00, 0x2b,
	0xbe, 0x4c, 0x3b, 0xeb, 0x84, 0x0b, 0x4e, 0x9a, 0x6c, 0xbb, 0x66, 0x49, 0x18, 0xb1, 0x58, 0xf8,
	0x2b, 0xf3, 0xbf, 0xc6, 0x82, 0x47, 0x11, 0x8f, 0x5f, 0xcc, 0xeb, 0x6f, 0xd0, 0xa0, 0x2c, 0xe5,
	0x9b, 0x64, 0xc1, 0x46, 0x7c, 0x99, 0x12, 0x0b, 0x6a, 0xc9, 0xbe, 0xd6, 0x35, 0x43, 0x6b, 0x1f,
	0x9b, 0x17, 0x9d, 0x83, 0xfe, 0x4e, 0x16, 0xa7, 0x79, 0x90, 0xbc, 0x85, 0x92, 0xbc, 0x4f, 0x2f,
	0x18, 0xc5, 0xf6, 0xb1, 0xa9, 0xbf, 0x6a, 0x18, 0xf1, 0x25, 0x65, 0x0b, 0x9e, 0x04, 0x54, 0xa5,
	0xae, 0xbf, 0x17, 0xa1, 0x9e, 0x6b, 0xe4, 0x0d, 0x34, 0x45, 0x18, 0x31, 0x6f, 0x13, 0x87, 0xdb,
	0xd8, 0x8f, 0xb9, 0xba, 0xb5, 0x42, 0x1b, 0x52, 0x9c, 0xed, 0x35, 0x72, 0x09, 0x35, 0x91, 0xf8,
	0x0b, 0xe6, 0x85, 0x81, 0x5e, 0x30, 0xb4, 0x76, 0x83, 0x56, 0x55, 0x3d, 0x0c, 0xc8, 0x05, 0x54,
	0xd3, 0xb5, 0x1f, 0x4b, 0xa7, 0xa8, 0x9c, 0x8a, 0x2c, 0x87, 0x01, 0x39, 0x85, 0xf2, 0x97, 0x95,
	0xbf, 0x4c, 0xf5, 0x92, 0xa1, 0xb5, 0xab, 0xf4, 0xa5, 0x20, 0x0e, 0x9c, 0xa4, 0xec, 0x99, 0x25,
	0xa1, 0xd8, 0x79, 0xf1, 0x26, 0x9a, 0xb3, 0x44, 0x2f, 0x1b, 0x5a, 0xbb, 0x65, 0x5e, 0xbd, 0x7a,
	0xf5, 0x64, 0x9f, 0x72, 0x55, 0x88, 0xb6, 0xd2, 0x83, 0x5a, 0x3e, 0x3b, 0x3f, 0x47, 0xb0, 0xad,
	0xd0, 0x2b, 0x86, 0xd6, 0xae, 0xd3, 0x46, 0x26, 0x4e, 0xd9, 0x56, 0x90, 0x2b, 0x80, 0xf4, 0x2b,
	0x4f, 0x84, 0x17, 0xfb, 0x11, 0xd3, 0xab, 0x2a, 0x51, 0x57, 0x8a, 0xeb, 0x47, 0x8c, 0x74, 0xa1,
	0x34, 0xe7, 0xc1, 0x4e, 0xaf, 0xa9, 0x39, 0x1b, 0xaf, 0x1e, 0xd0, 0x13, 0x22, 0x09, 0xe7, 0x1b,
	0xc1, 0xee, 0xd9, 0xee, 0xc9, 0x5f, 0x6d, 0x18, 0x55, 0x69, 0xf2, 0x11, 0xc0, 0xcf, 0xac, 0x54,
	0xaf, 0xab, 0x91, 0xff, 0xbd, 0xf7, 0x8f, 0x1e, 0xf2, 0x01, 0xf4, 0x20, 0xe1, 0xeb, 0x35, 0x0b,
	0xbc, 0xdf, 0xaa, 0xb7, 0xe0, 0x9b, 0x58, 0xe8, 0x60, 0x68, 0xed, 0x26, 0x3d, 0xdf, 0xfb, 0xf9,
	0x39, 0xe9, 0xad, 0x74, 0x6f, 0x7e, 0x14, 0xa0, 0x75, 0x38, 0x18, 0x72, 0x05, 0x97, 0x33, 0x77,
	0x60, 0x3b, 0x43, 0xd7, 0x1e, 0x78, 0x13, 0xfb, 0xc9, 0xa6, 0xc3, 0xe9, 0x67, 0xcf, 0x9d, 0x3d,
	0xf4, 0x6d, 0x8a, 0x47, 0xa4, 0x0e, 0xe5, 0x29, 0xed, 0xdd, 0xda, 0xa8, 0x11, 0x80, 0x8a, 0x42,
	0x13, 0x0b, 0x39, 0x5b, 0x58, 0xcc, 0xb9, 0x8b, 0x25, 0x19, 0x1f, 0xd8, 0xfd, 0xd9, 0x1d, 0x96,
	0xa5, 0xac, 0xd0, 0xc4, 0x4a, 0xce, 0x16, 0x56, 0x73, 0xee, 0x62, 0x8d, 0xd4, 0xa0, 0x34, 0x74,
	0x9d, 0x31, 0xd6, 0x65, 0xa3, 0x24, 0x13, 0x21, 0x43, 0x0b, 0x8f, 0x33, 0xec, 0x62, 0x43, 0x46,
	0x3f, 0xf5, 0xa8, 0x8b, 0x4d, 0x29, 0x4a, 0x32, 0xb1, 0x95, 0xa1, 0x85, 0x27, 0x19, 0x76, 0x11,
	0x25, 0xda, 0x94, 0x8e, 0x29, 0xfe, 0x23, 0x2f, 0x53, 0x68, 0x22, 0xc9, 0xd9, 0xc2, 0x7f, 0x73,
	0xee, 0xe2, 0xa9, 0x8c, 0x3b, 0xbd, 0x69, 0x6f, 0x84, 0x67, 0x52, 0x56, 0x68, 0xe2, 0x79, 0xce,
	0x16, 0x5e, 0xe4, 0xdc, 0x45, 0xfd, 0xc6, 0x81, 0x56, 0xfe, 0xfb, 0x1d, 0xf5, 0x27, 0x0f, 0x46,
	0x38, 0x1a, 0xdf, 0x79, 0xd4, 0xbe, 0x1d, 0xd3, 0x81, 0xe7, 0x8c, 0x7a, 0x77, 0x78, 0x44, 0xce,
	0x00, 0xd5, 0x7c, 0x54, 0x3d, 0xf1, 0x1e, 0x7a, 0x93, 0x7b, 0xfc, 0xa9, 0xf5, 0xdf, 0xc1, 0xff,
	0x21, 0xef, 0xf0, 0x35, 0x8b, 0x05, 0x5b, 0xb1, 0x88, 0x89, 0x64, 0xf7, 0xb2, 0xd3, 0x1d, 0xb5,
	0xfb, 0xcf, 0xef, 0xfb, 0x72, 0xcb, 0xd2, 0x47, 0x29, 0x3d, 0x6a, 0xf3, 0x8a, 0xf2, 0xac, 0x5f,
	0x01, 0x00, 0x00, 0xff, 0xff, 0xbb, 0xf8, 0x67, 0x74, 0x1a, 0x04, 0x00, 0x00,
}
