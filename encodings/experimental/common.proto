syntax = "proto3";

package experimental;

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";

// Resource information.
message Resource {
    // Set of labels that describe the resource.
    repeated AttributeKeyValue attributes = 1;

    // dropped_attributes_count is the number of dropped attributes. If the value is 0, then
    // no attributes were dropped.
    uint32 dropped_attributes_count = 2;
}


// ValueType is the enumeration of possible types that value can have.
// TODO: consolidate this with AttributeKeyValue.ValueType.
enum ValueType {
    STRING  = 0;
    INT     = 1;
    DOUBLE  = 2;
    BOOL    = 3;
    LIST    = 4;
    KVLIST  = 5;
};

//// AnyValue is a value that is used to store values that can be one of the supported
//// value types.
//message AnyValue {
//    // type of the value.
//    ValueType type = 1;
//
//    // Only one of the following fields is supposed to contain data (determined by `type` field).
//    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).
//
//    bool bool_value = 2;
//    string string_value = 3;
//    int64 int_value = 4;
//    double double_value = 5;
//
//    repeated AnyValue list_values = 6;
//    repeated AttributeKeyValue map_values = 7;
//}

// AttributeKeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
message AttributeKeyValue {
    // key part of the key-value pair. The key is empty if this AttributeKeyValue
    // is not a key-value list element (e.g. it is an element of a list).
    // See `list_values` field comment below.
    string key = 1;

    // type of the value.
    ValueType type = 2;

    // Only one of the *_value fields is supposed to contain data (determined by the
    // `type` field). This is deliberately not using Protobuf `oneof` for performance
    // reasons (verified by benchmarks).

    bool bool_value = 6;
    string string_value = 3;
    int64 int_value = 4;
    double double_value = 5;

    // A list of values or a map of values.
    // If ValueType=LIST then this is a list of values and `key` field inside each child
    // AttributeKeyValue must be set empty by writers and must be ignored by readers.
    // If ValueType=KVLIST then this is a list of key-values and child AttributeKeyValue
    // `key` is significant.
    repeated AttributeKeyValue list_values = 7;
}

// StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
// of AttributeKeyValue that only supports string values.
message StringKeyValue {
    string key = 1;
    string value = 2;
}

// InstrumentationLibrary is a message representing the instrumentation library information
// such as the fully qualified name and version.
message InstrumentationLibrary {
    string name = 1;
    string version = 2;
}