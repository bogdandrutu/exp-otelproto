syntax = "proto3";

package experimental;

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";

// Resource information.
message Resource {
    // Set of labels that describe the resource.
    repeated AttributeKeyValue attributes = 1;

    // dropped_attributes_count is the number of dropped attributes. If the value is 0, then
    // no attributes were dropped.
    uint32 dropped_attributes_count = 2;
}


// ValueType is the enumeration of possible types that value can have.
enum ValueType {
    STRING  = 0;
    INT     = 1;
    DOUBLE  = 2;
    BOOL    = 3;
    LIST    = 4;
    MAP     = 5;
};

// AnyValue is a value that is used to store values that can be one of the supported
// value types.
message AnyValue {
    // type of the value.
    ValueType type = 1;

    // Only one of the following fields is supposed to contain data (determined by `type` field).
    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).

    bool bool_value = 2;
    string string_value = 3;
    int64 int_value = 4;
    double double_value = 5;

    // If the type is LIST or MAP then this field is set and the list or the map
    // is stored in the ValueListOrMap message. If type is neither LIST nor MAP then
    // field is not set.
    // A list of values.
    repeated AnyValue list = 6;

    // A key/value map of values.
    repeated AttributeKeyValue map = 7;
}

// ValueListOrMap is used for storing a list or a map of values.
message ValueListOrMap {
    // AnyValue.type field defines which of the 2 fields in this message are set.

    // A list of values.
    repeated AnyValue list = 1;

    // A key/value map of values.
    repeated AttributeKeyValue map = 2;
}

// ValueList is used for storing a list.
message ValueList {
    // A list of values.
    repeated AnyValue list = 1;
}

// ValueMap is used for storing a map.
message ValueMap {
    // A key/value map of values.
    repeated AttributeKeyValue map = 1;
}

// AttributeKeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
message AttributeKeyValue {
    // key part of the key-value pair.
    string key = 1;

    // type of the value.
    ValueType type = 2;

    // Only one of the following fields is supposed to contain data (determined by `type` field).
    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).

    string string_value = 3;
    int64 int_value = 4;
    double double_value = 5;
    bool bool_value = 6;

    // If the type is LIST or MAP then this field is set and the list or the map
    // is stored in the ValueListOrMap message. If type is neither LIST nor MAP then
    // field is not set.
//    ValueListOrMap listOrMap = 7;
    // If the type is LIST or MAP then this field is set and the list or the map
    // is stored in the ValueListOrMap message. If type is neither LIST nor MAP then
    // field is not set.
    // A list of values.
    repeated AnyValue list = 7;

    // A key/value map of values.
    repeated AttributeKeyValue map = 8;
}

// StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
// of AttributeKeyValue that only supports string values.
message StringKeyValue {
    string key = 1;
    string value = 2;
}

// InstrumentationLibrary is a message representing the instrumentation library information
// such as the fully qualified name and version.
message InstrumentationLibrary {
    string name = 1;
    string version = 2;
}