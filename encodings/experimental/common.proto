syntax = "proto3";

package experimental;

option java_multiple_files = true;
option java_package = "io.opencensus.proto.trace.v1";
option java_outer_classname = "TraceProto";

option ruby_package = "OpenCensus.Proto.Trace.V1";

// Resource information.
message Resource {
    // Set of labels that describe the resource.
    repeated AttributeKeyValue attributes = 1;

    // dropped_attributes_count is the number of dropped attributes. If the value is 0, then
    // no attributes were dropped.
    uint32 dropped_attributes_count = 2;
}


// ValueType is the enumeration of possible types that value can have.
// TODO: consolidate this with AttributeKeyValue.ValueType.
enum ValueType {
    STRING  = 0;
    INT     = 1;
    DOUBLE  = 2;
    BOOL    = 3;
    LIST    = 4;
    KVLIST  = 5;
};

//message AnyValue {
//    // type of the value.
//    ValueType type = 2;
//
//    // Only one of the following fields is supposed to contain data (determined by `type` field).
//    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).
//
//    bool bool_value = 6;
//    string string_value = 3;
//    int64 int_value = 4;
//    ExoticValue extended_value = 5;
//}
//
//message ExoticValue {
//    repeated AttributeKeyValue list_or_kvlist_values = 2;
//}

// Design goals:
// 1. The representation of attributes should be consistent for spans and log records.
// 2. Allow representing arbitrary attribute values, including primitives, arrays and
//    and key-value pair lists (any JSON-like data is representable). This is partially
//    driven by the needs of logs, however it is also beneficial to have such capability
//    for spans, and futureproofs our needs for representing arbitrary structured data.
// 3. Aim to be fast and compact with regular ProtoBuf compilers, however may tradeoff
//    performance for consistency and flexibility of message schema provided that high
//    performance may be gained with specialized ProtoBuf compiler (GogoProtobuf), which
//    matters in critical high-performance applications (e.g. Collector).

// AttributeKeyValue is a key-value pair that is used to store Span attributes, Link
// attributes, etc.
message AttributeKeyValue {

    // key part of the key-value pair.
    string key = 1;
    // type of the value.
    ValueType type = 2;

    // Only one of the following fields is supposed to contain data (determined by `type` field).
    // This is deliberately not using Protobuf `oneof` for performance reasons (verified by benchmarks).

    bool bool_value = 3;
    string string_value = 4;
    int64 int_value = 5;
    double double_value = 6;
    //ExoticValue extended_value = 7;
    repeated AttributeKeyValue list_or_kvlist_values = 7;
    bytes bytes_value = 8;
}
// StringKeyValue is a pair of key/value strings. This is the simpler (and faster) version
// of AttributeKeyValue that only supports string values.
message StringKeyValue {
    string key = 1;
    string value = 2;
}

// InstrumentationLibrary is a message representing the instrumentation library information
// such as the fully qualified name and version.
message InstrumentationLibrary {
    string name = 1;
    string version = 2;
}